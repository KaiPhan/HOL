(* ========================================================================= *)
(* The Central Limit Theorems                                                *)
(* ========================================================================= *)

open HolKernel Parse boolLib bossLib;

open pairTheory combinTheory optionTheory prim_recTheory arithmeticTheory
                pred_setTheory pred_setLib topologyTheory hurdUtils;

open realTheory realLib iterateTheory seqTheory transcTheory real_sigmaTheory
                real_topologyTheory;

open util_probTheory extrealTheory sigma_algebraTheory measureTheory
     real_borelTheory borelTheory lebesgueTheory martingaleTheory
     probabilityTheory derivativeTheory integralTheory extreal_baseTheory;

val _ = new_theory "central_limit";



Definition normal_density :
    normal_density mu sig x =
      (1 / sqrt (2 * pi * sig pow 2)) * exp (-((x - mu) pow 2) / (2 * sig pow 2))
End

Overload std_normal_density = ‚Äúnormal_density 0 1‚Äù

Theorem std_normal_density_def :
    !x. std_normal_density x = (1 / sqrt (2 * pi)) * exp (-(x pow 2) / 2)
Proof
    RW_TAC std_ss [normal_density]
 >> SIMP_TAC real_ss [REAL_SUB_RZERO, POW_ONE]
QED

Theorem normal_density_nonneg :
    !mu sig x. 0 <= normal_density mu sig x
Proof
  RW_TAC std_ss [normal_density] THEN MATCH_MP_TAC REAL_LE_MUL THEN
  SIMP_TAC std_ss [EXP_POS_LE, GSYM REAL_INV_1OVER, REAL_LE_INV_EQ] THEN
  MATCH_MP_TAC SQRT_POS_LE THEN MATCH_MP_TAC REAL_LE_MUL THEN CONJ_TAC THENL
  [MATCH_MP_TAC REAL_LE_MUL THEN SIMP_TAC real_ss [REAL_LE_LT, PI_POS],
   ALL_TAC] THEN
  SIMP_TAC real_ss [REAL_LE_POW2]
QED

Theorem normal_density_pos :
    !mu sig. 0 < sig ==> 0 < normal_density mu sig x
Proof
  RW_TAC std_ss [normal_density] THEN MATCH_MP_TAC REAL_LT_MUL THEN
  SIMP_TAC std_ss [EXP_POS_LT, GSYM REAL_INV_1OVER, REAL_LT_INV_EQ] THEN
  MATCH_MP_TAC SQRT_POS_LT THEN MATCH_MP_TAC REAL_LT_MUL THEN CONJ_TAC THENL
  [MATCH_MP_TAC REAL_LT_MUL THEN SIMP_TAC real_ss [PI_POS], ALL_TAC] THEN
  MATCH_MP_TAC REAL_POW_LT >> art []
QED

Theorem normal_density_continuous_on :
    !mu sig s. normal_density mu sig continuous_on s
Proof
    rpt GEN_TAC
 >> ‚Äònormal_density mu sig =
       (\x. 1 / sqrt (2 * pi * sig pow 2) *
            exp (-((x - mu) pow 2) / (2 * sig pow 2)))‚Äô
       by rw [normal_density, FUN_EQ_THM]
 >> POP_ORW
 >> HO_MATCH_MP_TAC (SIMP_RULE std_ss [o_DEF] CONTINUOUS_ON_COMPOSE)
 >> reverse CONJ_TAC
 >- (‚Äò$* (1 / sqrt (2 * pi * sig pow 2)) = \x. (1 / sqrt (2 * pi * sig pow 2)) * x‚Äô
       by rw [FUN_EQ_THM] >> POP_ORW \\
     HO_MATCH_MP_TAC CONTINUOUS_ON_CMUL >> rw [CONTINUOUS_ON_ID])
 >> HO_MATCH_MP_TAC (SIMP_RULE std_ss [o_DEF] CONTINUOUS_ON_COMPOSE)
 >> reverse CONJ_TAC
 >- rw [CONTINUOUS_ON_EXP]
 >> REWRITE_TAC [real_div, Once REAL_MUL_COMM]
 >> HO_MATCH_MP_TAC CONTINUOUS_ON_CMUL
 >> REWRITE_TAC [Once REAL_NEG_MINUS1]
 >> HO_MATCH_MP_TAC CONTINUOUS_ON_CMUL
 >> HO_MATCH_MP_TAC CONTINUOUS_ON_POW
 >> HO_MATCH_MP_TAC CONTINUOUS_ON_SUB
 >> rw [CONTINUOUS_ON_ID, CONTINUOUS_ON_CONST]
QED

Theorem in_measurable_borel_normal_density :
    !mu sig. normal_density mu sig IN borel_measurable borel
Proof
    rpt GEN_TAC
 >> MATCH_MP_TAC in_borel_measurable_continuous_on
 >> rw [normal_density_continuous_on]
QED

Theorem IN_MEASURABLE_BOREL_normal_density :
    !mu sig. Normal o normal_density mu sig IN Borel_measurable borel
Proof
    rpt GEN_TAC
 >> HO_MATCH_MP_TAC IN_MEASURABLE_BOREL_IMP_BOREL'
 >> rw [sigma_algebra_borel, in_measurable_borel_normal_density]
QED


Overload ext_normal_density = ‚Äú\mu sig. Normal o normal_density mu sig o real‚Äù


Definition normal_measure_def :
  normal_measure mu sig s =
  pos_fn_integral ext_lborel (\x. ext_normal_density mu sig x * indicator_fn s x)
End

Definition normal_rv_def :
  normal_rv X p mu sig <=> real_random_variable X p /\
                           !s. s IN subsets Borel ==>
                               distribution p X s = normal_measure mu sig s
End

(* ------------------------------------------------------------------------- *)

Definition third_moment_def:
  third_moment p X = central_moment p X 3
End

Definition absolute_third_moment_def:
  absolute_third_moment p X  = absolute_moment p X 0 3
End

Theorem converge_in_dist_cong_full:
  !p X Y A B m. prob_space p ‚àß
                (!n x. m <= n /\ x IN p_space p ==> X n x = Y n x) /\
                (!x. x IN p_space p ==> A x = B x) ==>
                ((X --> A) (in_distribution p) <=> (Y --> B) (in_distribution p))
Proof
  rw [converge_in_dist, EXTREAL_LIM_SEQUENTIALLY]
  >> EQ_TAC >> rw []
  (*  ‚àÉN. ‚àÄn. N ‚â§ n ‚áí
         dist extreal_mr1 (expectation p (f ‚àò Y n),expectation p (f ‚àò B)) < e *)
  >> Q.PAT_X_ASSUM ‚Äò ‚àÄf. f bounded_on ùïå(:extreal) ‚àß f ‚àò Normal continuous_on ùïå(:real)
                         ==> P‚Äô (MP_TAC o (Q.SPEC ‚Äòf‚Äô)) >> rw []
  >> POP_ASSUM (MP_TAC o (Q.SPEC ‚Äòe‚Äô)) >> rw []
  >> Q.EXISTS_TAC ‚ÄòMAX N m‚Äô >> rw [MAX_LE]

  >- (
   Know ‚Äòexpectation p (f ‚àò Y n) =
           expectation p (f ‚àò X n)‚Äô
  >- (MATCH_MP_TAC expectation_cong \\ rw[])
  >> DISCH_TAC

  >> Know ‚Äòexpectation p (f ‚àò B) =
           expectation p (f ‚àò A)‚Äô
  >- (MATCH_MP_TAC expectation_cong \\ rw[])
  >> DISCH_TAC
  >> METIS_TAC []
    )

  >> Know ‚Äòexpectation p (f ‚àò Y n) =
           expectation p (f ‚àò X n)‚Äô
  >- (MATCH_MP_TAC expectation_cong \\ rw[])
  >> DISCH_TAC
  >> Know ‚Äòexpectation p (f ‚àò B) =
           expectation p (f ‚àò A)‚Äô
  >- (MATCH_MP_TAC expectation_cong \\ rw[])
  >> DISCH_TAC
  >> METIS_TAC []
QED

Theorem converge_in_dist_cong:
  ‚àÄp X Y Z m. prob_space p ‚àß
    (‚àÄn x. m ‚â§ n ‚àß x ‚àà p_space p ‚áí X n x = Y n x) ‚áí
    ((X ‚ü∂ Z) (in_distribution p) ‚áî (Y ‚ü∂ Z) (in_distribution p))
Proof
  rpt STRIP_TAC
  >> MATCH_MP_TAC converge_in_dist_cong_full
  >> Q.EXISTS_TAC ‚Äòm‚Äô >> rw []
QED

Theorem liapounov_ineq:
  !m u v. measure_space m /\ u IN lp_space r m ‚àß  u IN lp_space r' m ‚àß
          0 < r ‚àß
          r < r' ‚àß
          r' < PosInf  ==>
          seminorm r m u ‚â§ seminorm r' m u
Proof

  rpt GEN_TAC >> STRIP_TAC
  >> ‚Äò0 < r'‚Äô by METIS_TAC [lt_trans]
  >> ‚Äòr < PosInf‚Äô by METIS_TAC [lt_trans]
  >> ‚Äòr <> 0 ‚àß r' ‚â† 0‚Äô by rw [lt_imp_ne]
  >> ‚Äòr ‚â† PosInf ‚àß r' ‚â† PosInf ‚Äô by rw[lt_imp_ne]
  >> ‚ÄòNegInf < r ‚àß NegInf < r'‚Äô by METIS_TAC [extreal_0_simps, lt_trans]
  >> ‚Äòr ‚â† NegInf ‚àß r' ‚â† NegInf‚Äô by METIS_TAC [lt_imp_ne]
  >> ‚Äò0 < r' - r‚Äô by METIS_TAC[sub_zero_lt]
  >> ‚Äòr' - r ‚â† 0‚Äô by METIS_TAC[lt_imp_ne]
  >> ‚Äòr' - r ‚â† NegInf ‚àß r' - r ‚â† PosInf‚Äô by METIS_TAC [sub_not_infty]
  >> Know ‚Äòinv r <> PosInf /\ inv r <> NegInf‚Äô
  >- (MATCH_MP_TAC inv_not_infty >> art []) >> DISCH_TAC
  >> Know ‚Äòinv r' <> PosInf /\ inv r' <> NegInf‚Äô
  >- (MATCH_MP_TAC inv_not_infty >> art []) >> DISCH_TAC
  >> ‚Äòu IN measurable (m_space m,measurable_sets m) Borel‚Äô
    by gs [lp_space_def]
  >>  ‚Äòseminorm r m u <> PosInf /\ seminorm r m u <> NegInf /\
       seminorm r' m u <> PosInf /\ seminorm r' m u <> NegInf‚Äô
    by PROVE_TAC [seminorm_not_infty]
  >>  ‚Äò0 ‚â§ seminorm r m u /\ 0 ‚â§ seminorm r' m u ‚Äô
    by PROVE_TAC [seminorm_pos]
  >> rw [seminorm_def]
  >> Q.ABBREV_TAC ‚Äòf = Œªx. abs (u x)‚Äô >> rw[]
  >> Know ‚Äò‚àÄx. x IN m_space m ‚áí 0 ‚â§ f x‚Äô
  >- (METIS_TAC [abs_pos])
  >> DISCH_TAC
  >> Know ‚Äò‚àÄx. x IN m_space m ‚áí 0 ‚â§ f x powr r ‚àß  0 ‚â§ f x powr r'‚Äô
  >- (METIS_TAC [powr_pos])
  >> DISCH_TAC
  >> Know ‚Äò‚àÄx. x IN m_space m ‚áí 0 ‚â§ (f x powr r) powr inv(r) ‚àß  0 ‚â§ (f x powr r') powr inv(r')‚Äô
  >- (METIS_TAC [powr_pos])
  >> DISCH_TAC

  >> Know ‚Äò‚àÄx. x IN m_space m ‚áí  f x ‚â† PosInf‚Äô
  >- (cheat)
  >> DISCH_TAC


  >> Cases_on ‚Äò 1 ‚â§ f x‚Äô
  >- Know ‚Äò‚àÄx. x IN m_space m ‚áí f x powr r ‚â§  f x powr r'‚Äô
  >- (cheat)
  >> DISCH_TAC
  >> Know ‚Äò‚à´‚Å∫ m (Œªx. f x powr r) ‚â§  ‚à´‚Å∫ m (Œªx. f x powr r')‚Äô
  >- (cheat)
  >> DISCH_TAC
  >> Know ‚Äò‚à´‚Å∫ m (Œªx. f x powr r) powr inv(r) ‚â§  ‚à´‚Å∫ m (Œªx. f x powr r') powr inv(r)‚Äô
  >- (cheat)
  >> DISCH_TAC
  >> Know ‚Äò‚à´‚Å∫ m (Œªx. f x powr r') powr inv(r) ‚â§  ‚à´‚Å∫ m (Œªx. f x powr r') powr inv(r')‚Äô
  >- (cheat)
  >> DISCH_TAC

  >> Q.ABBREV_TAC ‚ÄòA = ‚à´‚Å∫ m (Œªx. f x powr r)‚Äô
  >> Q.ABBREV_TAC ‚ÄòB = ‚à´‚Å∫ m (Œªx. f x powr r')‚Äô
  >> MATCH_MP_TAC le_trans
  >> cheat

  >> Cases_on ‚Äòf x < 1‚Äô
  >- Know ‚Äò‚àÄx. x IN m_space m ‚áí f x powr r' ‚â§  f x powr r‚Äô
  >- (cheat)
  >> DISCH_TAC
  >> Know ‚Äò‚à´‚Å∫ m (Œªx. f x powr r') ‚â§  ‚à´‚Å∫ m (Œªx. f x powr r)‚Äô
  >- (cheat)
  >> DISCH_TAC
  >> Know ‚Äò‚à´‚Å∫ m (Œªx. f x powr r) powr inv(r) ‚â§  ‚à´‚Å∫ m (Œªx. f x powr r') powr inv(r)‚Äô
  >- (cheat)
  >> DISCH_TAC
  >> Know ‚Äò‚à´‚Å∫ m (Œªx. f x powr r') powr inv(r) ‚â§  ‚à´‚Å∫ m (Œªx. f x powr r') powr inv(r')‚Äô
  >- (cheat)
  >> DISCH_TAC

  >> Q.ABBREV_TAC ‚ÄòA = ‚à´‚Å∫ m (Œªx. f x powr r)‚Äô
  >> Q.ABBREV_TAC ‚ÄòB = ‚à´‚Å∫ m (Œªx. f x powr r')‚Äô
  >> MATCH_MP_TAC le_trans
  >> cheat

  >> cheat
QED

Definition gamma_function_def:
  gamma_function f z ‚áî z
End

Theorem moment_pdf_def:
  ‚àÄp X Y a r. moment (density p X) Y a r =
              expectation p (Œªx. (Y x - a) powr &r * normal_density mu sig x)
Proof
  rpt STRIP_TAC
  >> rw [moment_def]
  >> cheat

QED



Theorem normal_absolute_third_moment:
  ‚àÄp X sig. normal_rv X p 0 sig ‚áí
            absolute_third_moment p X = sqrt (8/œÄ)  *  variance p X  * sqrt (variance p X)
Proof
  rpt STRIP_TAC
  >> rw[absolute_third_moment_def, absolute_moment_def, normal_rv_def]
  >> FULL_SIMP_TAC std_ss [normal_rv_def, normal_measure_def]

  >>  ‚Äònormal_density 0 sig x =
       (1 / sqrt (2 * pi * sig pow 2) *
        exp (-(x pow 2) / (2 * sig pow 2)))‚Äô
    by rw [normal_density, FUN_EQ_THM]
  >> cheat
QED


Definition second_moments_def:
  second_moments p X n = SIGMA (Œªi. central_moment p (X i) 2) (count1 n)
End


Definition third_moments_def:
  third_moments p X n = SIGMA (Œªi. third_moment p (X i)) (count1 n)
End


Theorem central_limit:
  ‚àÄp X N s b. prob_space p ‚àß
              (‚àÄi. real_random_variable (X i) p) ‚àß
              normal_rv N p 0 (real (standard_deviation p (X 0))) ‚àß
              (‚àÄi. expectation p (X i) = 0) ‚àß
              (‚àÄi. central_moment p (X i) 2 < PosInf) ‚àß
              (‚àÄi. third_moment p (X i) < PosInf) ‚àß
              (‚àÄn. s n = sqrt (second_moments p X n)) ‚àß
              (‚àÄn. b n = third_moments p X n) ‚àß
              ((\n. b n / (s n pow 3)) --> 0) sequentially
            ‚áí ((\n x. (Œ£ (Œªi. X i x) (count1 n)) / s n) --> N) (in_distribution p)
Proof
  rpt STRIP_TAC
  >> rw [converge_in_dist]
  >> cheat

QED





(* ------------------------------------------------------------------------- *)






(*
Definition mgf_def:
  mgf p X s  =
  expectation p (\x. exp (Normal s * X x))
End
*)

(*
Theorem mgf_0:
  !p X. prob_space p ==> mgf p X 0 = 1
Proof
  RW_TAC std_ss [mgf_def, mul_lzero, exp_0, normal_0]
  >> MATCH_MP_TAC expectation_const >> art[]
QED

Theorem real_random_variable_exp:
  ‚àÄp X r. prob_space p ‚àß real_random_variable X p ‚áí real_random_variable (Œªx. exp (X x)) p
Proof
  rpt GEN_TAC
  >> simp [real_random_variable, prob_space_def, p_space_def, events_def]
  >> STRIP_TAC
  >> CONJ_TAC
  >- (MATCH_MP_TAC IN_MEASURABLE_BOREL_EXP >>  qexists_tac ‚ÄòX‚Äô >> rw [])
  >> Q.X_GEN_TAC ‚Äòx‚Äô
  >> DISCH_TAC
  >> ‚Äò?z. X x = Normal z‚Äô by METIS_TAC [extreal_cases] >> POP_ORW
  >> rw[extreal_exp_def]
QED

Theorem real_random_variable_exp_normal:
  ‚àÄp X r. prob_space p ‚àß real_random_variable X p ‚áí
                     real_random_variable (Œªx. exp (Normal s * X x)) p
Proof
  rw [real_random_variable_cmul, real_random_variable_exp]
QED

Theorem mgf_linear:
  ‚àÄp X a b s. prob_space p ‚àß real_random_variable X p ‚àß
              integrable p (Œªx. exp (Normal (a * s) * X x))  ‚áí
              mgf p (Œªx.( Normal a * X x) + Normal b) s =  (exp (Normal s * Normal b)) * mgf p X (a * s)

Proof
  rw [mgf_def, real_random_variable_def]
  >> Know ‚Äò expectation p (Œªx. exp (Normal s * ((Normal a * X x) + Normal b)))
            = expectation p (Œªx. exp ((Normal s * (Normal a * X x)) + Normal s * Normal b))‚Äô
  >- ( MATCH_MP_TAC expectation_cong  >> rw[] >> AP_TERM_TAC
      >> ‚Äò‚àÉc. X x = Normal c‚Äô by METIS_TAC [extreal_cases] >> rw[]
      >> ‚Äò‚àÉd. Normal a * Normal c = Normal d‚Äô by METIS_TAC [extreal_mul_eq] >> rw[add_ldistrib_normal2]
    ) >> Rewr'
  >> Know ‚Äòexpectation p
           (Œªx. exp (Normal s * (Normal a * X x) + Normal s * Normal b)) =
           expectation p (Œªx. (exp (Normal s * (Normal a * X x))) * exp (Normal s * Normal b))‚Äô
  >- ( MATCH_MP_TAC expectation_cong
       >> rw[exp_add]
       >>  ‚Äò‚àÉc. X x = Normal c‚Äô by METIS_TAC [extreal_cases]>> rw[]
       >> ‚Äò‚àÉd. Normal a * Normal c = Normal d‚Äô by METIS_TAC [extreal_mul_eq] >> rw[]
       >> ‚Äò‚àÉe. Normal s * Normal d = Normal e‚Äô by METIS_TAC [extreal_mul_eq] >> rw[]
       >> ‚Äò‚àÉf. Normal s * Normal b = Normal f‚Äô by METIS_TAC [extreal_mul_eq] >> rw[exp_add]
     ) >> Rewr'
  >> ‚Äò‚àÉg. exp (Normal s * Normal b) = Normal g‚Äô by  METIS_TAC [extreal_mul_eq, normal_exp]
  >> rw[]
  >> GEN_REWRITE_TAC (RATOR_CONV o ONCE_DEPTH_CONV) empty_rewrites [mul_comm]
  >> rw [mul_assoc, extreal_mul_eq]
  >> HO_MATCH_MP_TAC expectation_cmul
  >> ASM_REWRITE_TAC []
QED

Theorem mgf_sum:
  !p X Y s . prob_space p /\ real_random_variable X p  /\
             real_random_variable Y p  /\ indep_vars p X Y Borel Borel
             ‚àß  mgf p (\x. X x + Y x) s ‚â† PosInf ‚àß  mgf p X s ‚â† PosInf
             ‚àß  mgf p Y s ‚â† PosInf  ==>
            mgf p (\x. X x + Y x) s = mgf p X s * mgf p Y s
Proof
  rw [mgf_def, real_random_variable_def]
  >> Know ‚Äòexpectation p (\x. exp (Normal s * (X x + Y x))) =
                       expectation p (\x. exp ((Normal s * X x) + (Normal s * Y x)))‚Äô
  >-( MATCH_MP_TAC expectation_cong >> rw[] >> AP_TERM_TAC
      >> MATCH_MP_TAC add_ldistrib_normal >> rw[])
      >> Rewr'
  >> Know ‚Äò expectation p (Œªx. exp (Normal s * X x + Normal s * Y x)) =
            expectation p (Œªx. exp (Normal s * X x) * exp (Normal s * Y x))‚Äô
  >- ( MATCH_MP_TAC expectation_cong  >> rw[] >> MATCH_MP_TAC exp_add >> DISJ2_TAC
       >> ‚Äò‚àÉa. X x = Normal a‚Äô by METIS_TAC [extreal_cases]
       >>  ‚Äò‚àÉb. Y x = Normal b‚Äô by METIS_TAC [extreal_cases]
       >> rw[extreal_mul_eq]) >> Rewr'
  >> HO_MATCH_MP_TAC indep_vars_expectation
  >> simp[]

  >> CONJ_TAC
     (* real_random_variable (Œªx. exp (Normal s * X x)) p *)
  >- ( MATCH_MP_TAC real_random_variable_exp_normal
       >>  fs[real_random_variable, random_variable_def] )

  >> CONJ_TAC
     (* real_random_variable (Œªx. exp (Normal s * X x)) p *)
  >- ( MATCH_MP_TAC real_random_variable_exp_normal
       >>  fs[real_random_variable, random_variable_def] )

  >> CONJ_TAC
     (* indep_vars p (Œªx. exp (Normal s * X x)) (Œªx. exp (Normal s * Y x)) Borel Borel *)
  >- ( Q.ABBREV_TAC ‚Äòf = Œªx. exp (Normal s * x)‚Äô
       >> simp []
       >> MATCH_MP_TAC ( REWRITE_RULE [o_DEF] indep_rv_cong )   >> csimp[]
       >> Q.UNABBREV_TAC ‚Äòf‚Äô
       >> MATCH_MP_TAC IN_MEASURABLE_BOREL_EXP
       >> simp [] >> Q.EXISTS_TAC ‚ÄòŒªx. Normal s * x‚Äô >> simp[SIGMA_ALGEBRA_BOREL]
       >> MATCH_MP_TAC IN_MEASURABLE_BOREL_CMUL
       >> qexistsl [‚ÄòŒªx. x‚Äô, ‚Äòs‚Äô]
       >> simp[SIGMA_ALGEBRA_BOREL,  IN_MEASURABLE_BOREL_BOREL_I])

  >> Know ‚Äò(Œªx. exp (Normal s * X x)) ‚àà Borel_measurable (measurable_space p)‚Äô
  >- ( MATCH_MP_TAC IN_MEASURABLE_BOREL_EXP
       >> Q.EXISTS_TAC ‚ÄòŒªx. Normal s * X x‚Äô
       >> fs [prob_space_def, measure_space_def]
       >> MATCH_MP_TAC IN_MEASURABLE_BOREL_CMUL
       >> qexistsl [‚ÄòX‚Äô, ‚Äòs‚Äô] >> simp[random_variable_def]
       >> fs [random_variable_def, p_space_def, events_def])
  >> DISCH_TAC

  >> Know ‚Äò(Œªx. exp (Normal s * Y x)) ‚àà Borel_measurable (measurable_space p)‚Äô
  >- ( MATCH_MP_TAC IN_MEASURABLE_BOREL_EXP
       >> Q.EXISTS_TAC ‚ÄòŒªx. Normal s * Y x‚Äô
       >> fs [prob_space_def, measure_space_def]
       >> MATCH_MP_TAC IN_MEASURABLE_BOREL_CMUL
       >> qexistsl [‚ÄòY‚Äô, ‚Äòs‚Äô] >> simp[random_variable_def]
       >> fs [random_variable_def, p_space_def, events_def])
  >> DISCH_TAC

  >> Q.ABBREV_TAC ‚Äòf = Œªx. exp (Normal s * X x)‚Äô >> simp []
  >> ‚Äò‚àÄx. x ‚àà p_space p ‚áí 0 ‚â§  f x‚Äô by METIS_TAC [exp_pos]
  >> Q.ABBREV_TAC ‚Äòg = Œªx. exp (Normal s * Y x)‚Äô >> simp []
  >> ‚Äò‚àÄx. x ‚àà p_space p ‚áí 0 ‚â§  g x‚Äô by METIS_TAC [exp_pos]

  >> CONJ_TAC (* integrable p f *)
  >- (Suff ‚Äò pos_fn_integral p f <> PosInf‚Äô
      >- FULL_SIMP_TAC std_ss [prob_space_def, p_space_def, integrable_pos, expectation_def]
      >> ‚Äò‚à´ p f = ‚à´‚Å∫ p f ‚Äô by METIS_TAC[integral_pos_fn, prob_space_def, p_space_def]
      >> METIS_TAC [expectation_def]
      >> simp[])

  >- (Suff ‚Äò pos_fn_integral p g <> PosInf‚Äô
      >- FULL_SIMP_TAC std_ss [prob_space_def, p_space_def, integrable_pos, expectation_def]
      >> ‚Äò‚à´ p g = ‚à´‚Å∫ p g ‚Äô by METIS_TAC[integral_pos_fn, prob_space_def, p_space_def]
      >> METIS_TAC [expectation_def])
QED

(*------------------------------------------------------------------*)

Theorem mgf_sum_independent:
  ‚àÄp X s (J : 'index set). prob_space p /\ FINITE J /\
                           (‚àÄi. i IN J ‚áí real_random_variable (X i) p)
                           ==> mgf p (Œªx. SIGMA (Œªi. X i x) J) s =
                                   PI (Œªi. mgf p (X i) s) J
Proof
  rpt GEN_TAC
  >> STRIP_TAC
  >> FULL_SIMP_TAC std_ss [mgf_def]
  >> Know ‚Äòexpectation p (Œªx. exp (Normal s * ‚àë (Œªi. X i x) J)) =
           expectation p (Œªx.  ‚àè (Œªi. exp (Normal s * X i x)) J)‚Äô
           >- ( MATCH_MP_TAC expectation_cong >> rw[]

)



QED



Theorem mgf_uniqueness_discreate:
  ‚àÄp X Y s. prob_space p ‚àß FINITE (p_space p) ‚àß
                       real_random_variable X p ‚àß
                       real_random_variable Y p ‚àß
            mgf p X s ‚â† PosInf ‚àß
            mgf p X s ‚â† NegInf ‚àß
            mgf p Y s ‚â† PosInf ‚àß
            mgf p Y s ‚â† NegInf ‚àß
            mgf p X s = mgf p Y s ‚áí
            distribution p X = distribution p Y
Proof


QED


Theorem mgf_uniqueness:
  ‚àÄp X Y s. prob_space p ‚àß real_random_variable X p ‚àß real_random_variable Y p ‚àß
            mgf p X s ‚â† PosInf ‚àß
            mgf p X s ‚â† NegInf ‚àß
            mgf p Y s ‚â† PosInf ‚àß
            mgf p Y s ‚â† NegInf ‚àß
            mgf p X s = mgf p Y s ‚áí
            distribution p X =  distribution p Y
Proof
  rw [mgf_def, distribution_def]

  >> qexists_tac ‚Äòx‚Äô

  (** expectation p (Œªx. exp (Normal s * X x)) =
           expectation p (Œªx. exp (Normal s * Y x)) **)
  >> Q.PAT_X_ASSUM ‚Äòexpectation p (Œªx. exp (Normal s * X x)) =
                    expectation p (Œªx. exp (Normal s * Y x))‚Äô MP_TAC
  >> MATCH_MP_TAC expectation_cong
QED



(*independent_identical_distribution*)
Definition iid_def:
  iid p X E A J ‚áî  identical_distribution p X E J ‚àß
                 pairwise_indep_vars p X A J
End

Definition normal_distribution_def:
  ‚àÄ p X J. normal_distribution p X J M V ‚áî
           real_random_variable p X ‚àß
           (‚àÄ i. i ‚àà J) ‚àß
           M = expectation p (Œªi. X i) ‚àß M  ‚â† PosInf ‚àß M ‚â† NegInf ‚àß
           V = variance p X ‚àß V > 0 ‚àß V ‚â† PosInf ‚áí
           pdf p X =
           (1 / (sqrt (2 * pi * V))) *
           exp ( - ((X i - M) ** 2) / (2 * V))
End

Theorem central_limit_theorem_iid:
  ‚àÄp X E A J . prob_space p ‚àß
               iid p X E A J ‚àß
               (‚àÄi. i IN J ‚áí variance p (X i) ‚â† PosInf ‚àß
               variance p (X i) ‚â† NegInf) ‚àß
               (‚àÄi. i IN J ‚áí real_random_variable (X i) p) ‚áí
               ( (Œªi x. (Œ£ (X i x) J / n) - expectation p (X i)) /(sqrt (variance p (X 0)) / sqrt(& i)) -->
                    normal_distribution p X J 0 1  (in_distribution p)
Proof
QED


Theorem mgf_derivative:
  ‚àÄmgf mgf' p X s. (mgf p X s) has_derivative (mgf' p X s) net (at 0) ‚áí
            mgf' p X 0 = expectation p (\x.  X x)
Proof
QED



*)

(*---------------------------------------------------------------------------*
 * Write the theory to disk.                                                 *
 *---------------------------------------------------------------------------*)

val _ = export_theory();
val _ = html_theory "central_limit";

(* References:

  [1] Shiryaev, A.N.: Probability-1. Springer-Verlag New York (2016).
  [2] Shiryaev, A.N.: Probability-2. Springer-Verlag New York (2019).
  [3] Chung, K.L.: A Course in Probability Theory, Third Edition. Academic Press (2001).

 *)
